name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - temp/test-workflow  # temp/test-workflow 브랜치에 푸시될 때 실행
  workflow_dispatch:  # GitHub UI에서 'Run workflow' 버튼을 눌러 수동으로 실행할 수 있도록 설정

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 1. Checkout source code
        uses: actions/checkout@v3

      - name: 2. JDK 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 3. yml 파일 세팅
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application-dev.yml

      - name: 4. Gradle 환경 설치
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: 5. Gradle 빌드
        run: ./gradlew build -x test

      - name: 6. 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./kikihi-be-aws.jar

      - name: 7. EC2에 배포 및 실행 (JAR 파일)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}  # EC2 퍼블릭 IP를 GitHub Secrets에서 불러옴
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: kikihi-be-aws.jar
          target: /home/ubuntu/Platform-Server/kikihi-be-aws.jar
          script: |
            cd /home/ubuntu/Platform-Server
            pkill -f 'java' || true  # 기존 Java 프로세스 종료
            nohup java -jar kikihi-be-aws.jar > app.log 2>&1 &  # JAR 파일 실행

      - name: 8. docker-compose.yml 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: docker/docker-compose.yml
          target: /home/ubuntu/docker-compose.yml

      - name: 9. elasticsearch.yml 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: docker/elasticsearch.yml
          target: /home/ubuntu/elasticsearch.yml

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'ap-northeast-2'
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      S3_OBJECT_KEY: ${{ secrets.S3_OBJECT_KEY }}

  # 2. 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 2-1. EC2에서 Docker Compose 실행
      - name: EC2에서 Docker Compose 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/docker
            sudo docker-compose down || true 
            sudo docker-compose up -d

      # 2-2. EC2에서 JAR 실행
      - name: SSH로 EC2에 접속하여 JAR 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo fuser -k -n tcp 8080 || true  # 포트 8080에 이미 실행 중인 프로세스 종료
            sudo nohup java -jar /home/ubuntu/Platform-Server/kikihi-be-aws.jar > /home/ubuntu/Platform-Server/app.log 2>&1 &  # JAR 파일 실행
